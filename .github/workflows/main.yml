# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: 
      - '**'
  pull_request:
    branches: [ master, tests, docs ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  dump_contexts_to_log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          DEBUG_GH_CONTEXT_EVENT: ${{ toJson(github.event_name) }}
          DEBUG_GH_CONTEXT_BASE_REF: ${{ toJson(github.base_ref) }}
        run: echo "$DEBUG_GH_CONTEXT_EVENT $DEBUG_GH_CONTEXT_BASE_REF"

  # runs basic tests on numpy backend. Dependency for job test-full
  test-basic:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend: [ np ]
        python_v: ['3.9']
      fail-fast: true
    
    steps:
      - run: CI=false
      - uses: actions/checkout@v2.7.0

      - name: setup python
        uses: actions/setup-python@v3.1.3
        with:
          python-version: ${{ matrix.python_v }}

      - name: setup deps
        run: pip install flake8 pylint pytest pytest-cov numpy scipy h5py;

      - name: static analysis flake8
        run: |
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics;
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics;

      - name: static analysis py_lint
        continue-on-error: true
        run: pylint -d C0301,C0103,W0212 ./yastn/

      # Run tests
      - name: tests
        run: |
          cd tests/;
          pytest --backend ${{ matrix.backend }} -v ./tensor;
          pytest --backend ${{ matrix.backend }} -v ./mps;

  deploy-docs:
    if: contains(fromJson('["refs/heads/master","refs/heads/docs"]'), github.ref)
    permissions: 
      contents: read
      pages: write
      id-token: write
    uses: ./.github/workflows/docs.yml
    with:
      python-version: '3.9'

  test-full-coverage:
    needs: test-basic
    if: contains(fromJson('["refs/heads/master", "refs/heads/tests"]'), github.ref)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend: [ torch ]
        python_v: ['3.9']
        pytorch_v: ['1.13.1']
      fail-fast: true

    steps:
      - run: CI=false
      - uses: actions/checkout@v2.7.0

      - name: setup python
        uses: actions/setup-python@v3.1.3
        with:
          python-version: ${{ matrix.python_v }}
      
      - name: setup deps
        run: pip install flake8 pylint pytest pytest-cov numpy scipy h5py;
      
      - name: setup pytorch
        if: matrix.backend == 'torch'
        run: |
          if [[ "${{ matrix.pytorch_v }}" == "1.13.1" ]];
          then
            pip install torch==${{ matrix.pytorch_v }}+cpu --extra-index-url https://download.pytorch.org/whl/cpu
          else
            pip install torch --index-url https://download.pytorch.org/whl/cpu
          fi
        
      # Run tests
      - name: tests
        run: |
          cd tests/;
          pytest --cov=yastn --cov-report html --backend ${{ matrix.backend }} -v ./tensor;
          pytest --cov=yastn --cov-report html --backend ${{ matrix.backend }} -v ./mps --cov-append;
          pytest --cov=yastn --cov-report html --backend np -v ./tensor --cov-append;
      
      - name: upload coverage
        if: success()
        uses: actions/upload-artifact@v3.1.2
        with:
          name: coverage-report
          path: ./tests/htmlcov/index.html


  # run matrix of tests for python and torch versions
  test-full:
    needs: test-basic
    if: |
      contains(fromJson('["refs/heads/master", "refs/heads/tests"]'), github.ref) ||
      ( github.event_name == 'pull_request' && contains(fromJson('["master",]'), github.base_ref) )
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend: [ np, torch ]
        python_v: ['3.9', '3.10', '3.11']
        pytorch_v: [ 'none', '1.13.1', '2.0' ]
        exclude:
          - backend: np
            python_v: '3.9'
          - backend: np
            pytorch_v: '1.13.1'
          - backend: np
            pytorch_v: '2.0'
          - backend: torch
            pytorch_v: 'none'
          - backend: torch
            python_v: '3.9'
            pytorch_v: '1.13.1'
      fail-fast: false

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - run: CI=false

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2.7.0

      # Runs a single command using the runners shell
      # - name: Run a one-line script
      # run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: setup python
        uses: actions/setup-python@v3.1.3
        with:
          python-version: ${{ matrix.python_v }}
      
      - name: setup deps
        run: pip install flake8 pylint pytest pytest-cov numpy scipy h5py;
      
      - name: setup pytorch
        if: matrix.backend == 'torch'
        run: |
          if [[ "${{ matrix.pytorch_v }}" == "1.13.1" ]];
          then
            pip install torch==${{ matrix.pytorch_v }}+cpu --extra-index-url https://download.pytorch.org/whl/cpu
          else
            pip install torch --index-url https://download.pytorch.org/whl/cpu
          fi
        
      # Run tests
      - name: tests
        run: |
          cd tests/;
          pytest --backend ${{ matrix.backend }} -v ./tensor;
          pytest --backend ${{ matrix.backend }} -v ./mps;
